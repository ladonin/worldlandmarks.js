    qqq(v){
        return function(){
            alert(v);
        }
    }
onClick={this.qqq(22222222)}

this.props.match.params

 dangerouslySetInnerHTML={{__html:sssssssssss}}

<a onClick={this.goTo} data-url={'/' + Consts.CONTROLLER_NAME_ARTICLE + '/' + _article['id']}>{_article['title']}</a>

onclick="window.dispatchEvent('${Consts.EVENT_GOTO}', {url:'/'+${Consts.CONTROLLER_NAME_CATALOG}+'/' + ${window._ppAs[id + '_cc']}})"

_photoInsert = <CroppedPhoto
    blockWidth = {this.photoWidth}
    blockHeight ={this.photoHeight}
    photoWidth = {_photo['width']}
    photoHeight = {_photo['height']}
    photoSrc = {_photo['dir'] + "6_" + _photo['name']}
/>;


this.props.redux.staticData.
this.props.redux.actionData.

        Socket.backgroundQuery(
            Consts.CONTROLLER_NAME_CATALOG,
            'get_placemarks_list',
            this.props.match.params,
            {
                [Consts.ID_VAR_NAME]:this.idNext,
                [Consts.REQUEST_FORM_DATA]:this.props.data ? this.props.data : this.searchData
            })











CSSTransition:

import React, { useState, useEffect } from 'react';
import { CSSTransition  } from 'react-transition-group'


function App() {
  const [inProp, setInProp] = useState(true);
  return (
    <div>
      <CSSTransition
        appear={true}
        in={inProp}

        classNames="my-node"

        addEndListener={(node, done) => {
            // use the css transitionend event to mark the finish of a transition
            node.addEventListener('transitionend', done, false);
        }}
        timeout={7200 /* fallback variant unless addEndListener is provided*/}


        onEnter = {(node) => {
            //alert('enter');
        }}
        onEntering = {(node) => {
            //alert('entering');
        }}
        onEntered = {(node) => {
            //alert('entered');
        }}


        onExit = {(node) => {
            //alert('Exit');
        }}
        onExiting = {(node) => {
            //alert('Exiting');
        }}
        onExited = {(node) => {
            //alert('Exited');
        }}



    >
        <div>
          {"I'll receive my-node-* classes " + inProp}
        </div>
      </CSSTransition>
      <button type="button" onClick={() => setInProp(inProp ? false : true)}>
        Click to Enter
      </button>
    </div>
  );
}



export default App







.my-node-appear {
  opacity: 1;color:#f0f;

}
.my-node-appear-active {
  opacity: 1;  color:#00f;
  transition: all 7200ms;
}


.my-node-enter {
  opacity: 1;color:#0f0;  left:0px;position:relative;
}
.my-node-enter-active {
  opacity: 1;  color:#0f7;
  transition: all 7200ms;
}
.my-node-enter-done {
    position:relative;
  opacity: 1;  color:#0ff;
  transition: all 7200ms;  left:1000px;
}
.my-node-exit {
  opacity: 1;  color:#f00;
}
.my-node-exit-active {
  opacity: 1;color:#170;

  transition: all 7200ms;
}
.my-node-exit-done {
  opacity: 1;color:#ff7;
  transition: all 7200ms;
}